vue掌握列表


template不常用写法
class类绑定
v-on绑定多个事件
v-model用法及其他表单元素
全局组件和局部组件注册
组件v-model及修饰符


函数调用传reactive的参数失去响应式

reactive里嵌套ref    使用对应的值可以不用.value解包  区别 toRef 要解包

$ref解包语法糖

watch  的  getter写法   
()=>a+b,(sum)=>console.log(sum)

props,defineProps
ctx.emit,defineEmits
ctx.expose,defineExpose

顶层setup的自定义指令的使用

nextTick的两个用法
watchPostEffect
watchAsyncEffect
triggerRef
markRow

effect作用域相关
effectScope
getCurrentScope
onScopeDispose

生命周期
onErrorCapture
errorCaptured


$data
$props
   el
   options
   slots
   forceUpdate
   

v-memo

useSlots  useAttrs


css深度选择器>>>


vue-router

监听路由参数变化的两种方式
watch    beforeRouteUpdate


path: "/user-:afterUser(.*)"  的作用

path:"/user/: id(\\d+)"    id只匹配数字

path:"/: id+"    /1/2/3   +表示一个或多个

path:"/: id*"     *表示0个或多个

router.resolve()用来返回一段标准化版本的路由(route)

sensitive 和 strict的作用   大小写或者尾部斜杠/

可选参数?

router.push({})如果用了path不能用parmas用query    否则用路由的name属性替代path


命名视图
<router-view  name="LiftSidebar">
命名视图必须每个都定义props配置
props:{default:true,sider:false}

重定向的三种写法

重定向相对位置的写法

路由别名的写法

路由里的props属性  将props设置为true   route.params将被设置为props
props有三种形式 布尔   对象  函数







第三个参数next的了解  确保每个路由守卫都被调用一次


router.beforeResolve的写法

router.afterEach

beforeEnter路由独享守卫    是写在配置路由时里面的一个属性，和path同级   他只在进入路由时触发，不会随着params   query   hash改变触发如/user/2到/user/3 不触发     但是  user/2到/home   会触发
也可以用数组函数的形式传给他
beforeEnter:[queryParams,queryHash]


组件内的路由守卫
const User = {
    template:``,
    beforeRouterEnter(to,from){},

    beforeRouterUpdate(to,from){},

    beforeRouterLeave(to,from){},
}
但是注意beforeRouterEnter不能访问this因为组件还没被创建，可以调用第三个参数next来访问
beforeRouterEnter(to,from,next){
       next((el)=>console.log(el))
},

next传入一个err最后会被router.onError的回调函数捕获




路由元信息meta字段及$route.meta匹配父路由到子路由的meta合集


数据获取的两种方案


setup里除了useRoute和useRouter
想使用路由守卫   onBeforeRouterLeave  onBeforeRouterUpdate

useLink类似于v-slot类似的访问属性配合RouterLink

scrollBehavior用来操作路由跳转时候的滚动位置
scrollBehavior(to,from,savedPosition){
        savedPosition只有popState导航时候才有效    即点击浏览器的前进后退触发
}


router.push完成后有个返回值可以判断是否离开了当前位置

但是想要得到足够的信息知道为什么导航被阻止了被啥阻止了isNavigationFailure

鉴别导航故障的三种类型
aborted   cancelled   duplicated


所有导航失败都会暴露to和from属性来反映当前和目标位置

检测重定向   当在导航守卫中返回一个新地址时候会触发一个新的导航
通过读取router.currentRoute.value.redirectedFrom


router.replace(router.currentRoute.value.fullPath)用来改变当前位置并覆盖原来位置    如果需要等待新的路由显示可以用await  router.replace()

在导航守卫里不能使用router.replace而是返回一个新的位置




